version: '3'

services:
  postgres:
    build:
      context: ./postgres
      dockerfile: Dockerfile
    container_name: quiz_postgres
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -p 5432"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - quiz_network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: quiz_backend
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}
      - PYTHONUNBUFFERED=1  # Ensures Python output is sent straight to terminal
    ports:
      - "${APP_PORT}:8000"
    volumes:
      - ./backend:/app
      - ./backend/${UPLOAD_FOLDER}:/app/${UPLOAD_FOLDER}
    command: >
      sh -c "
      /wait &&
        echo 'Waiting for postgres...' &&
        python -m app.db_migrations &&
        echo 'Starting backend server...' &&
        uvicorn app.main:app --host 0.0.0.0 --port ${APP_PORT} --reload
      "
    networks:
      - quiz_network
    restart: on-failure:3
    # Add healthcheck for backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${APP_PORT}/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: quiz_frontend
    ports:
      - "${FRONTEND_PORT}:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    env_file:
      - .env
    command: ["yarn", "dev", "--host", "0.0.0.0"]
    networks:
      - quiz_network
    depends_on:
      - backend

networks:
  quiz_network:
    driver: bridge

volumes:
  pg_data:
    name: quiz_pgdata